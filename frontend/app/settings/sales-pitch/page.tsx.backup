"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { Loader2, Save, RotateCcw } from "lucide-react";
import { Sidebar } from "@/components/sidebar";

interface SalesPitchSettings {
  // 基本設定
  companyName: string;
  serviceName: string;
  representativeName: string;
  targetDepartment: string;

  // 自己紹介設定
  selfIntroduction: string;
  serviceDescription: string;
  targetPerson: string;

  // セールスピッチ設定
  companyDescription: string;
  callToAction: string;
  keyBenefits: string[];
}

export default function SalesPitchSettingsPage() {
  const [settings, setSettings] = useState<SalesPitchSettings>({
    // 基本設定
    companyName: "",
    serviceName: "",
    representativeName: "",
    targetDepartment: "",

    // 自己紹介設定
    selfIntroduction: "",
    serviceDescription: "",
    targetPerson: "",

    // セールスピッチ設定
    companyDescription: "",
    callToAction: "",
    keyBenefits: []
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [newBenefit, setNewBenefit] = useState("");
  const { toast } = useToast();

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/users/sales-pitch', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        const agentData = data.data;
        setSettings({
          // 基本設定
          companyName: agentData.conversationSettings?.companyName || "",
          serviceName: agentData.conversationSettings?.serviceName || "",
          representativeName: agentData.conversationSettings?.representativeName || "",
          targetDepartment: agentData.conversationSettings?.targetDepartment || "",

          // 自己紹介設定
          selfIntroduction: agentData.conversationSettings?.selfIntroduction || "",
          serviceDescription: agentData.conversationSettings?.serviceDescription || "",
          targetPerson: agentData.conversationSettings?.targetPerson || "",

          // セールスピッチ設定
          companyDescription: agentData.conversationSettings?.salesPitch?.companyDescription || "",
          callToAction: agentData.conversationSettings?.salesPitch?.callToAction || "",
          keyBenefits: agentData.conversationSettings?.salesPitch?.keyBenefits || []
        });
      } else {
        // Log the actual error for debugging
        const errorData = await response.json();
        console.error('API Error:', response.status, errorData);
        
        // If agent settings don't exist (404), use default values
        if (response.status === 404) {
          console.log('Agent settings not found, using defaults');
          setSettings({
            // 基本設定
            companyName: "AIコールシステム株式会社",
            serviceName: "AIアシスタントサービス",
            representativeName: "佐藤",
            targetDepartment: "営業部",

            // 自己紹介設定
            selfIntroduction: "わたくしＡＩコールシステムの佐藤と申します",
            serviceDescription: "新規テレアポや掘り起こしなどの営業電話を人間に代わって生成AIが電話をかけるというサービスを提供している",
            targetPerson: "営業の担当者さま",

            // セールスピッチ設定
            companyDescription: "AIコールシステム株式会社では、生成AIを使った新規顧客獲得テレアポ支援により、AIが一次架電と仕分けを行い、見込み度の高いお客さまだけを営業におつなぎする仕組みをご提供しています。",
            callToAction: "御社の営業部ご担当者さまに、概要だけご説明させていただけますか？",
            keyBenefits: []
          });
          
          toast({
            title: "初期設定",
            description: "エージェント設定が見つからないため、デフォルト値を使用します。まず基本設定を完了してください。",
            variant: "default"
          });
        } else {
          throw new Error(`Failed to load settings: ${response.status} ${errorData.message || ''}`);
        }
      }
    } catch (error) {
      console.error('Error loading sales pitch settings:', error);
      
      // Use default settings as fallback
      setSettings({
        // 基本設定
        companyName: "AIコールシステム株式会社",
        serviceName: "AIアシスタントサービス",
        representativeName: "佐藤",
        targetDepartment: "営業部",

        // 自己紹介設定
        selfIntroduction: "わたくしＡＩコールシステムの佐藤と申します",
        serviceDescription: "新規テレアポや掘り起こしなどの営業電話を人間に代わって生成AIが電話をかけるというサービスを提供している",
        targetPerson: "営業の担当者さま",

        // セールスピッチ設定
        companyDescription: "AIコールシステム株式会社では、生成AIを使った新規顧客獲得テレアポ支援により、AIが一次架電と仕分けを行い、見込み度の高いお客さまだけを営業におつなぎする仕組みをご提供しています。",
        callToAction: "御社の営業部ご担当者さまに、概要だけご説明させていただけますか？",
        keyBenefits: []
      });
      
      toast({
        title: "警告",
        description: "設定の読み込み中にエラーが発生しました。デフォルト値を使用します。",
        variant: "default"
      });
    } finally {
      setLoading(false);
    }
  };

  const saveSettings = async () => {
    try {
      setSaving(true);
      const token = localStorage.getItem('token');
      
      const response = await fetch('/api/users/sales-pitch', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(settings)
      });

      if (response.ok) {
        toast({
          title: "保存完了",
          description: "セールスピッチ設定が保存されました。",
        });
      } else {
        const errorData = await response.json();
        console.error('Save API Error:', response.status, errorData);
        
        if (response.status === 404) {
          toast({
            title: "エラー",
            description: "エージェント設定が見つかりません。まず基本設定を完了してください。",
            variant: "destructive"
          });
        } else {
          throw new Error(`Failed to save settings: ${response.status} ${errorData.message || ''}`);
        }
      }
    } catch (error) {
      console.error('Error saving sales pitch settings:', error);
      toast({
        title: "エラー",
        description: `セールスピッチ設定の保存に失敗しました: ${error.message}`,
        variant: "destructive"
      });
    } finally {
      setSaving(false);
    }
  };

  const resetToDefault = () => {
    setSettings({
      // 基本設定
      companyName: "AIコールシステム株式会社",
      serviceName: "AIアシスタントサービス",
      representativeName: "佐藤",
      targetDepartment: "営業部",

      // 自己紹介設定
      selfIntroduction: "わたくしＡＩコールシステムの佐藤と申します",
      serviceDescription: "新規テレアポや掘り起こしなどの営業電話を人間に代わって生成AIが電話をかけるというサービスを提供している",
      targetPerson: "営業の担当者さま",

      // セールスピッチ設定
      companyDescription: "弊社では、AIアシスタントサービスを提供しております。AIが一次架電を行い、見込み度の高いお客様だけを営業におつなぎする仕組みです。",
      callToAction: "ぜひ御社の営業部ご担当者さまに概要をご案内できればと思いまして。",
      keyBenefits: []
    });
  };

  const addBenefit = () => {
    if (newBenefit.trim() && !settings.keyBenefits.includes(newBenefit.trim())) {
      setSettings(prev => ({
        ...prev,
        keyBenefits: [...prev.keyBenefits, newBenefit.trim()]
      }));
      setNewBenefit("");
    }
  };

  const removeBenefit = (index: number) => {
    setSettings(prev => ({
      ...prev,
      keyBenefits: prev.keyBenefits.filter((_, i) => i !== index)
    }));
  };

  if (loading) {
    return (
      <div className="flex min-h-screen bg-gray-50">
        <Sidebar />
        <main className="flex-1 p-6 flex items-center justify-center">
          <div>
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">設定を読み込み中...</span>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-gray-50">
      <Sidebar />
      <main className="flex-1 p-6">
        <div className="max-w-4xl mx-auto space-y-6">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">トークスクリプト設定</h1>
            <p className="text-muted-foreground mt-2">
              AI通話で使用するトークスクリプトの変数をカスタマイズできます。
            </p>
          </div>

        {/* 基本設定セクション */}
        <Card>
          <CardHeader>
            <CardTitle>基本設定</CardTitle>
            <CardDescription>
              会社の基本情報とエージェントの識別情報を設定します。
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="companyName">会社名</Label>
                <Input
                  id="companyName"
                  placeholder="会社名を入力してください"
                  value={settings.companyName}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    companyName: e.target.value
                  }))}
                />
              </div>
              <div>
                <Label htmlFor="serviceName">サービス名</Label>
                <Input
                  id="serviceName"
                  placeholder="サービス名を入力してください"
                  value={settings.serviceName}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    serviceName: e.target.value
                  }))}
                />
              </div>
              <div>
                <Label htmlFor="representativeName">担当者名</Label>
                <Input
                  id="representativeName"
                  placeholder="担当者名を入力してください"
                  value={settings.representativeName}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    representativeName: e.target.value
                  }))}
                />
              </div>
              <div>
                <Label htmlFor="targetDepartment">対象部門</Label>
                <Input
                  id="targetDepartment"
                  placeholder="対象部門を入力してください"
                  value={settings.targetDepartment}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    targetDepartment: e.target.value
                  }))}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* 自己紹介設定セクション */}
        <Card>
          <CardHeader>
            <CardTitle>自己紹介設定</CardTitle>
            <CardDescription>
              通話開始時の自己紹介で使用される文言を設定します。
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label htmlFor="selfIntroduction">自己紹介文</Label>
                <Input
                  id="selfIntroduction"
                  placeholder="自己紹介文を入力してください"
                  value={settings.selfIntroduction}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    selfIntroduction: e.target.value
                  }))}
                />
                <p className="text-sm text-muted-foreground mt-1">
                  例：「わたくしＡＩコールシステムの佐藤と申します」
                </p>
              </div>
              <div>
                <Label htmlFor="serviceDescription">サービス説明文</Label>
                <Textarea
                  id="serviceDescription"
                  placeholder="サービスの簡潔な説明を入力してください"
                  value={settings.serviceDescription}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    serviceDescription: e.target.value
                  }))}
                  className="min-h-[80px]"
                />
                <p className="text-sm text-muted-foreground mt-1">
                  例：「新規テレアポや掘り起こしなどの営業電話を人間に代わって生成AIが電話をかけるというサービスを提供している」
                </p>
              </div>
              <div>
                <Label htmlFor="targetPerson">対象者</Label>
                <Input
                  id="targetPerson"
                  placeholder="話したい相手の表現を入力してください"
                  value={settings.targetPerson}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    targetPerson: e.target.value
                  }))}
                />
                <p className="text-sm text-muted-foreground mt-1">
                  例：「営業の担当者さま」
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* セールスピッチ設定セクション */}
        <Card>
          <CardHeader>
            <CardTitle>セールスピッチ設定</CardTitle>
            <CardDescription>
              「用件を教えてください」と聞かれた際に使用される詳細なピッチ文を設定します。
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label htmlFor="companyDescription">会社・サービス紹介文</Label>
                <Textarea
                  id="companyDescription"
                  placeholder="会社とサービスの詳細な説明を入力してください"
                  value={settings.companyDescription}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    companyDescription: e.target.value
                  }))}
                  className="min-h-[120px]"
                />
                <p className="text-sm text-muted-foreground mt-1">
                  例：「AIコールシステム株式会社では、生成AIを使った新規顧客獲得テレアポ支援により...」
                </p>
              </div>
              <div>
                <Label htmlFor="callToAction">コールトゥアクション</Label>
                <Textarea
                  id="callToAction"
                  placeholder="担当者への取次や説明の要請文を入力してください"
                  value={settings.callToAction}
                  onChange={(e) => setSettings(prev => ({
                    ...prev,
                    callToAction: e.target.value
                  }))}
                  className="min-h-[80px]"
                />
                <p className="text-sm text-muted-foreground mt-1">
                  例：「御社の営業部ご担当者さまに、概要だけご説明させていただけますか？」
                </p>
              </div>
              <div>
                <Label htmlFor="keyBenefits">主要メリット（任意）</Label>
                <div className="space-y-2">
                  {settings.keyBenefits.map((benefit, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <Input value={benefit} readOnly />
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => removeBenefit(index)}
                      >
                        削除
                      </Button>
                    </div>
                  ))}
                  <div className="flex items-center gap-2">
                    <Input
                      placeholder="新しいメリットを入力"
                      value={newBenefit}
                      onChange={(e) => setNewBenefit(e.target.value)}
                      onKeyDown={(e) => e.key === 'Enter' && addBenefit()}
                    />
                    <Button onClick={addBenefit} variant="outline" size="sm">
                      追加
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* テンプレートプレビューセクション */}
        <Card>
          <CardHeader>
            <CardTitle>テンプレートプレビュー</CardTitle>
            <CardDescription>
              設定された変数がトークスクリプトでどのように使用されるかのプレビューです。
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* 初回質問テンプレート */}
              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-semibold text-sm mb-2">通話開始時</h4>
                <p className="text-sm">
                  <strong>AI：</strong>
                  「お世話になります。{settings.selfIntroduction || '[自己紹介文]'}。弊社は{settings.serviceDescription || '[サービス説明文]'}会社でございます。是非、御社の{settings.targetDepartment || '[対象部門]'}にご案内できればと思いお電話をさせていただきました！本日、{settings.targetPerson || '[対象者]'}はいらっしゃいますでしょうか？」
                </p>
              </div>

              {/* 用件説明テンプレート */}
              <div className="bg-green-50 p-4 rounded-lg">
                <h4 className="font-semibold text-sm mb-2">「ご用件を教えてください」と聞かれた時</h4>
                <p className="text-sm">
                  <strong>顧客：</strong>「ご用件を教えてください。」
                </p>
                <p className="text-sm mt-2">
                  <strong>AI：</strong>
                  「ありがとうございます。{settings.companyDescription || '[会社・サービス紹介文]'} {settings.callToAction || '[コールトゥアクション]'}」
                </p>
              </div>

              {/* 転送説明テンプレート */}
              <div className="bg-purple-50 p-4 rounded-lg">
                <h4 className="font-semibold text-sm mb-2">転送説明時</h4>
                <p className="text-sm">
                  <strong>AI：</strong>
                  「お忙しいところすみません。{settings.selfIntroduction || '[自己紹介文]'}。弊社は{settings.serviceDescription || '[サービス説明文]'}会社でございます。<br/><br/>これより直接担当者から詳細をご説明させて頂いてもよろしいでしょうか？<br/>お構いなければ{settings.companyName || '[会社名]'}から弊社の担当者に取り次ぎのうえご説明申し上げます。」
                </p>
              </div>

              {/* 会社確認テンプレート */}
              <div className="bg-yellow-50 p-4 rounded-lg">
                <h4 className="font-semibold text-sm mb-2">「どちら様ですか？」と聞かれた時</h4>
                <p className="text-sm">
                  <strong>顧客：</strong>「どちら様ですか？」
                </p>
                <p className="text-sm mt-2">
                  <strong>AI：</strong>
                  「{settings.companyName || '[会社名]'}でございます。{settings.representativeName || '[担当者名]'}です。是非、御社の{settings.targetPerson || '[対象者]'}にご案内できればと思いお電話をさせていただきました！本日、{settings.targetPerson || '[対象者]'}はいらっしゃいますでしょうか？」
                </p>
              </div>

              {/* 変数一覧 */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h4 className="font-semibold text-sm mb-3">使用可能な変数一覧</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-xs">
                  <div><code>companyName</code>: {settings.companyName || '未設定'}</div>
                  <div><code>serviceName</code>: {settings.serviceName || '未設定'}</div>
                  <div><code>representativeName</code>: {settings.representativeName || '未設定'}</div>
                  <div><code>targetDepartment</code>: {settings.targetDepartment || '未設定'}</div>
                  <div><code>selfIntroduction</code>: {settings.selfIntroduction || '未設定'}</div>
                  <div><code>targetPerson</code>: {settings.targetPerson || '未設定'}</div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="flex gap-4">
          <Button 
            onClick={saveSettings} 
            disabled={saving}
            size="lg"
          >
            {saving ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                保存中...
              </>
            ) : (
              <>
                <Save className="mr-2 h-4 w-4" />
                設定を保存
              </>
            )}
          </Button>
          
          <Button 
            variant="outline" 
            onClick={resetToDefault}
            size="lg"
          >
            <RotateCcw className="mr-2 h-4 w-4" />
            デフォルトに戻す
          </Button>
        </div>
      </main>
    </div>
  );
}